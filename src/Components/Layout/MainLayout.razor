@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using TourDeApp.Components.Pages.Shared
@using TourDeApp.Components.Pages
@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="page">
    <div class="header">
        <a href="">
            <img src="TdA_Logo/SVG/hlavni_logo.svg" alt="Logo" class="logo" />
        </a>
        <h1 class="nazev">PIŠKVORKY</h1>
    </div>
<!--
        @if (loggedIn == false)
        {
            <button @onclick="() => LoginDialog.Open()">Přihlásit se</button>
        }
        else
        {
            <p>Jste přihlášen</p>
        }
        <Modal @ref="LoginDialog">
            <EditForm FormName="login" Model="loginModel" OnValidSubmit="Login">
                <DataAnnotationsValidator/>
                
                <div>
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="loginModel.Email"></InputText>
                    <ValidationMessage For="@(() => loginModel.Email)"></ValidationMessage>
                </div>
                
                <div>
                    <label for="password">Heslo</label>
                    <InputText id="password" @bind-Value="loginModel.Password"></InputText>
                    <ValidationMessage For="(() => loginModel.Password)"></ValidationMessage>
                </div>
                
                <button type="submit">Příhlásit</button>
            </EditForm>
        </Modal>
    </div>

!-->
    <main>
        @Body
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<!--
@code {
    private Modal LoginDialog;
    
    
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    private bool loggedIn = false;
    
    private LoginModel loginModel = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        loggedIn = user.Identity.IsAuthenticated;
    }
    
    private class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    private async Task Login()
    {
        try
        {
            var result = await SignInManager.PasswordSignInAsync(loginModel.Email, loginModel.Password, false, false);

            if (result.Succeeded)
            {
                LoginDialog.Close();
            }
            else if (result == null)
            {
                Console.WriteLine("Výsledek je null");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Něco se posralo {ex.Message}");
        }
    }
}
!-->