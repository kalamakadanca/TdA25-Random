@using TourDeApp.Infrastructure
@using TourDeApp.Infrastructure.CustomConverters
@using TourDeApp.Models
@using TourDeApp.Models.Schemas
@inject GameService GameService
@inject GamesController GameController


<div>
    <span class="game_field">
        <table class="table">
            <tbody>
                @for (int row = 0; row < GlobalSettings.BoardLength; row++)
                {
                    <tr>
                        @for (int column = 0; column < GlobalSettings.BoardLength; column++)
                        {
                            var cell = new TourDeApp.Models.Schemas.Cell()
                    {
                        CellID = [row, column],
                        State = CellStateConverter.ToEnum(Game.Board[row][column])
                    };

                            <td class="game_cell">
                                <Cell CellInstance="cell" OnClick="ChangeCellState"></Cell>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </span>
</div>


@code {
    [Parameter, EditorRequired] public Game Game { get; set; }

    [Parameter] public EventCallback OnWin { get; set; }

    [Parameter] public EventCallback ReRender { get; set; }

    protected override void OnInitialized()
    {
    }

    private async void ChangeCellState(Models.Schemas.Cell cell)
    {
        if (cell.State != CellState.Empty) return;

        GameState gameState = Game.GameState;

        Game.UpdateBoard(cell);

        // Sends an the update to db
        await GameController.Put(Game.Uuid, new GameCreateUpdateRequest(Game)); // TODO: Don't save if game is not saved in the database

        if (Game.CheckWin())
        {     
            Win();
        }
    }

    private async Task ReRenderParent()
    {
        await ReRender.InvokeAsync();
    }
    
    private async Task Win()
    {
        await OnWin.InvokeAsync();
    }

}