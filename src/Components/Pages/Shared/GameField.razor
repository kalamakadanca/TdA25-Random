@using TourDeApp.Infrastructure
@using TourDeApp.Infrastructure.CustomConverters
@using TourDeApp.Models
@using TourDeApp.Models.Schemas
@inject GameService GameService
@inject GamesController GameController


<table class="table">
    <tbody>
        @for (int row = 0; row < GlobalSettings.BoardLength; row++)
        {
            <tr>
                @for (int column = 0; column < GlobalSettings.BoardLength; column++)
                {
                    var cell = new TourDeApp.Models.Schemas.Cell()
                    {
                        CellID = [row, column],
                        State = CellStateConverter.ToEnum(Game.Board[row][column])
                    };

                    <td class="game_cell">
                        <Cell CellInstance="cell" OnClick="ChangeCellState"></Cell>
                    </td>
                }
            </tr>
        }
    </tbody>
</table>


@code {
    [Parameter, EditorRequired] public Game Game { get; set; }

    [Parameter] public EventCallback OnWin { get; set; }

    [Parameter] public EventCallback ReRender { get; set; }

    protected override void OnInitialized()
    {
    }

    private void ChangeCellState(Models.Schemas.Cell cell)
    {
        if (cell.State != CellState.Empty || Game.Winner != null) return;

        GameState gameState = Game.GameState;

        Game.UpdateBoard(cell);

        // Sends the update to db
        //await GameController.Put(Game.Uuid, new GameCreateUpdateRequest(Game));

        if (Game.CheckWinAndSetGameState())
        {
            foreach (var id in Game.WinningLine)
            {
                Console.WriteLine($"{id[0]}, {id[1]}");
            }
            Win();
        }

        ReRenderParent();
    }

    private async Task ReRenderParent()
    {
        await ReRender.InvokeAsync();
    }

    private async Task Win()
    {
        await OnWin.InvokeAsync();
    }

}