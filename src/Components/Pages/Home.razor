@page "/"
@using TourDeApp.Models
@using TourDeApp.Components.Pages.Shared
@rendermode InteractiveServer
@inject NavigationManager navigationManager
@inject GamesController GamesController

<PageTitle>Home</PageTitle>

<div class="container">
    <button class="nazev_tlacitko" id="tlac_1" @onclick="Play">Hrát</button>
    <button class="nazev_tlacitko" id="tlac_2">Nahrát hru</button>
</div>

<!-- Přesunul bych do MainLayout -->
<Modal @ref="ModalRef">
    <h3 id="text_2">Login</h3>
    <EditForm Model="@UserModel" OnValidSubmit="HandleValidSubmit">
        <div class="form-group">
            <label for="username">Uživatelské jméno:</label>
            <InputText required placeholder="Táďa" id="username" @bind-Value="UserModel.Username" />
        </div>
        <div class="form-group">
            <label for="password">Heslo:</label>
            <InputText required placeholder="8+ znaků" type="password" id="password" minlength="8"
                @bind-Value="UserModel.Password" />
        </div>
        <button type="submit" class="submit">Submit</button>
    </EditForm>
</Modal>

<button @onclick="OpenModal">Přihlásit se</button>

<hr style="margin: 20px 0; border: 1px solid white;" />
@* <h1 class="nazev">ano, ta čára tam má být</h1> *@

@if (Games != null)
{
    <div class="border" style="padding: 20px; margin-top: 20px;">
        <div style="display: flex; flex-direction: column;">
            @foreach (var game in Games)
            {
                @*<div class="flex-center" style="margin-bottom: 10px">
        <div class="@ItemClass(todo)" style="width: 280px;">@todo.Text</div>
        </div>*@

                <PreviewGame Game="game"></PreviewGame>
            }
        </div>
    </div>
}
else
{
    <h1>Loading...</h1>
}







@code
{
    private Modal? ModalRef;
    private UserModel UserModel { get; set; } = new();
    public bool meh = true;
    private Models.Game defaultGame = new Models.Game("Default game", DifficultyType.Beginner);
    private bool gamesLoading { get; set; }
    private List<Models.Game>? _games;
    public List<Models.Game>? Games
    {
        get
        {
            return _games;
        }
        set
        {
            _games = value;
            StateHasChanged();
        }
    }

    private void OpenModal() => ModalRef?.Open();
    private void HandleValidSubmit()
    {
        ModalRef?.Close();
    }
    private void Play()
    {
        navigationManager.NavigateTo("/game", true);
    }

    private IList<Todoitem> Todos { get; set; } = new List<Todoitem>();

    protected override void OnInitialized()
    {
        // working on
        Todos.Add(new Todoitem("Wash Clothes"));
        Todos.Add(new Todoitem("Clean Desk"));
    }

    protected override async Task OnInitializedAsync()
    {
        gamesLoading = true;
        // Start a background task to load games without blocking the UI
        _ = LoadGamesAsync();
    }

    private async Task LoadGamesAsync()
    {
        Games = await GetGames();
        gamesLoading = false;
        await InvokeAsync(StateHasChanged); // Notify Blazor to update the UI
    }

    public string ItemClass(Todoitem item)
    {
        return item.Completed ? "item-completed" : "";
    }

    private async Task<List<Models.Game>> GetGames()
    {
        await Task.Delay(1000);
    
        var result = await GamesController.Get();
    
        if (result is ObjectResult objectResult && objectResult.StatusCode == 200)
        {
            var games = objectResult.Value as List<TourDeApp.Models.Game>;
    
            if (games != null)
            {
                return games;
            }
        }
    
        return new List<Models.Game>() { defaultGame };
    }
}
