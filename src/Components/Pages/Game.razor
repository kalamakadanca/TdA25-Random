@page "/game/"
@page "/game/{Uuid}"
@using TourDeApp.Components.Pages.Shared
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject GameService GameService
@inject GamesController GamesController
@using TourDeApp.Models.Schemas

<PageTitle>Game</PageTitle>

@if (_game != null && _game.GameFinished != true)
{
    <div class="grid-container">
        <div class="left">
            <div class="grid-item">
                @if (hr_ed)
                {
                    <h1 id="text_2" style=" font-size: 48px; font-family: 'Dosis-ExtraBold', sans-serif; text-align:center;">HRA
                    </h1>
                    <div style="display: flex; gap: 10px;">
                        <h3 id="text_0">Na řadě je:</h3>
                        @if (_game.Next == CellState.X)
                        {
                            <img src="/TdA_Ikonky/SVG/X/X_cervene.svg" style="width: 25px; height: 25px; margin-top: 5px;" />
                        }
                        else
                        {
                            <img src="/TdA_Ikonky/SVG/O/O_modre.svg" style="width: 25px; height: 25px; margin-top: 5px;" />
                        }
                    </div>
                }
                else
                {
                    <h1 id="text_1" style=" font-size: 48px; font-family: 'Dosis-ExtraBold', sans-serif;">EDITOR</h1>
                }
            </div>
        </div>

        <div class="game">
            <GameField Game="_game" OnWin="StateHasChanged" ReRender="StateHasChanged"></GameField>
        </div>

        <div class="right">
            <div class="grid-item">
                <div class="container_g">
                    <button class=tlac_g id="tlac_2" @onclick="() => hr_ed = false">Hra</button>
                    <div id="text_0">|</div>
                    <button class=tlac_g id="tlac_1" @onclick="() => hr_ed = true">Editor</button>
                </div>
                @if (hr_ed)
                {

                    <EditForm Model="@UserModel">
                        <div class="form-group" style="padding: 10px 0">
                            <label>Název hry:</label>
                            <InputText @bind-Value="_saveName" />
                        </div>
                        <div class="form-group">
                            <label>Zadej Random Text</label>
                            <InputText @bind-Value="_gameUuid" style="background-color: white" />
                        </div>
                    </EditForm>
                    <button id="tlac_3" @onclick="SaveGame" style=" ">Uložit</button>
                }
                else
                {
                    <form>
                        <button class=tlac_g id="tlac_3">yapyap</button>
                        <button class=tlac_g id="tlac_4">yapyap</button>
                    </form>
                }
            </div>
        </div>
    </div>
}
else if (_game == null)
{
    <!-- TODO: Show loading screen or spinning circle (will be nice when games are retrieved from database) -->
}
else
{
    <!-- TODO: Display a message saying who has won, how many rounds, etc. -->
}

@code
{
    public bool hr_ed = true;

    private string? _gameUuid { get; set; }
    private string? _saveName { get; set; }
    private Modal? ModalRef;
    private UserModel UserModel { get; set; } = new();
    public bool meh = true;
    private Models.Game defaultGame = new Models.Game("Default game", DifficultyType.Beginner);
    private bool gamesLoaded = false;
    private List<Models.Game>? games { get; set; }

    private void NewGame()
    {
        if (NavigationManager.Uri.Contains("/game/"))
        {
            NavigationManager.NavigateTo("/game", true);
        }
        else
        {
            _game = GameService.CreateGame();
            StateHasChanged();
        }
    }

    private Models.Game? _game { get; set; }
    [Parameter] public string? Uuid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string currentUrl = NavigationManager.Uri;
        if (currentUrl.Contains("/game/"))
        {
            var index = currentUrl.IndexOf("/game/") + "/game/".Length;
            Uuid = currentUrl.Substring(index);
            _game = await LoadGame(Uuid);
        }
        else
        {
            _game = GameService.CreateGame();
        }
    }

    private async Task SaveGame()
    {
        if (_game == null) return;
        var request = new GameCreateUpdateRequest(_game);
        var result = await GamesController.Post(request);

        if (result is ObjectResult objectResult && objectResult.StatusCode == 201)
        {
            if (objectResult.Value is Models.Game game)
            {
                Uuid = game.Uuid;
                NavigationManager.NavigateTo($"/game/{Uuid}");
            }
        }
        else
        {
            Console.WriteLine("Hra se NEuložila :(");
        }
    }

    private async Task<Models.Game> LoadGame(string uuid)
    {
        if (uuid == null) return defaultGame;

        var result = await GamesController.Get(uuid);

        if (result is ObjectResult objectResult && objectResult.StatusCode == 200)
        {
            if (objectResult.Value is TourDeApp.Models.Game game)
            {
                return game;
            }
            return defaultGame;
        }
        else
        {
            Console.WriteLine("There has been an error");
            return defaultGame;
        }
    }




    private void OpenModal() => ModalRef?.Open();
    private void HandleValidSubmit()
    {
        ModalRef?.Close();
    }

    private IList<Todoitem> Todos { get; set; } = new List<Todoitem>();



    public string ItemClass(Todoitem item)
    {
        return item.Completed ? "item-completed" : "";
    }

    private async Task<List<Models.Game>> GetGames()
    {
        var result = await GamesController.Get();

        if (result is ObjectResult objectResult && objectResult.StatusCode == 200)
        {
            var games = objectResult.Value as List<TourDeApp.Models.Game>;

            if (games != null)
            {
                foreach (TourDeApp.Models.Game game in games)
                {
                    StateHasChanged();
                    return games;
                }
            }
        }

        return new List<Models.Game>() { defaultGame };
    }

}
