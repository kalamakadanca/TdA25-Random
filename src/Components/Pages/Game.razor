@page "/game/"
@page "/game/{Uuid}"
@using TourDeApp.Components.Pages.Shared
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject GameService GameService
@inject GamesController GamesController

<PageTitle>Game</PageTitle>

@if (_game != null && _game.GameFinished != true)
{
    <div class="grid-container">
        <div class="left">
            <div class="grid-item">
                @if (hr_ed)
                {
                    <h1 class="nazev" id="text_2">HRA</h1>
                }
                else
                {
                    <h1 class="nazev" id="text_1">EDITOR</h1>
                }
            </div>
        </div>

        <div class="game">
            <GameField Game="_game" OnWin="StateHasChanged" ReRender="StateHasChanged"></GameField>
        </div>

        <div class="right">
            <div class="grid-item">
                <div class="container_g">
                    <button class=tlac_g id="tlac_2" @onclick="Change_Hr">Hra</button>
                    <div id="text_0">|</div>
                    <button class=tlac_g id="tlac_1" @onclick="Change_Ed">Editor</button>
                </div>
                @if (hr_ed)
                {
                    <form>
                        <button class=tlac_g id="tlac_3" @onclick="SaveGame">Uložit</button>
                        <button class=tlac_g id="tlac_4" @onclick="GetGames">Načíst</button>
                    </form>
                }
                else
                {
                    <form>
                        <button class=tlac_g id="tlac_3">yapyap</button>
                        <button class=tlac_g id="tlac_4">yapyap</button>
                    </form>
                }
            </div>
        </div>
    </div>
}
else if (_game == null)
{
    <!-- TODO: Show loading screen or spinning circle (will be nice when games are retrieved from database) -->
}
else
{
    <!-- TODO: Display a message saying who has won, how many rounds, etc. -->
}

@code
{
    public bool hr_ed = true;

    private void Change_Ed()
    {
        hr_ed = false;
    }
    private void Change_Hr()
    {
        hr_ed = true;
    }

    private Models.Game? _game { get; set; }
    [Parameter] public string Uuid { get; set; }

    protected override void OnInitialized()
    {
        _game = GameService.CreateGame();
        StateHasChanged(); // Tell blazor that Game should be loaded
    }

    private async Task SaveGame()
    {
        var request = new GameCreateUpdateRequest(_game);
        var result = await GamesController.Post(request);

        if (result is ObjectResult objectResult && objectResult.StatusCode == 201)
        {
            Console.WriteLine("Hra se uložila");
        }
        else
        {
            Console.WriteLine("Hra se NEuložila :(");
        }
    }

    private void GetGames()
    {
        var result = GamesController.Get();

        if (result is ObjectResult objectResult && objectResult.StatusCode == 200)
        {
            var games = objectResult.Value as List<TourDeApp.Models.Game>;

            if (games != null)
            {
                foreach (TourDeApp.Models.Game game in games)
                {
                    Console.WriteLine($"{game.Name}, {game.Uuid}, {game.Difficulty}, {game.GameState}");
                }
            }
        }
    }
}
